import glob
import os
from typing import Any, Dict, List, Optional, Sequence

import torch
from allenact.base_abstractions.experiment_config import MachineParams

from allenact.utils.viz_utils import (
    VizSuite,
    ActorViz,
    AgentViewViz,
    TensorViz1D,
)
from allenact_plugins.procthor_plugin.procthor_viz import ThorViz
from projects.objectnav_baselines.experiments.procthor.CW_objectnav_procthor_rgb_clipresnet50gru_ddppo import CW_EmbCLIP_ObjectNavProcThorPPOExperimentConfig
from projects.objectnav_baselines.experiments.procthor.OW_objectnav_procthor_rgb_clipresnet50gru_ddppo import OW_EmbCLIP_ObjectNavProcThorPPOExperimentConfig
from projects.objectnav_baselines.experiments.procthor.LBaug_objectnav_procthor_rgb_clipresnet50gru_ddppo import LBaug_EmbCLIP_ObjectNavProcThorPPOExperimentConfig

class VIZ_ObjectNavProcThorPPOExperimentConfig(CW_EmbCLIP_ObjectNavProcThorPPOExperimentConfig):
    """ExperimentConfig used for vizualization of followed trajectories, agent's RGB egocentric views and action probabilities.

    generate_episodes.py can be used to generate more episodes for specific scenes or objects. Make sure to set the attributes accordingly.

    # Attributes

    TEST_EPS_DIR: Directory which contains episodes JSONs generated by generate_episodes.py.
    SCENE: Scene name to visualize.
    viz_ep_ids : Episodes that will be visualized.
    viz_video_ids : Episodes that will have videos visualizations associated with them.
    """

    # Episode JSONs directory for visualization
    TEST_EPS_DIR = os.path.join(os.getcwd(), "datasets/ProcTHOR/Test/0_ALL/episodes_vizualization")

    # Scene to visualize within TEST_EPS_DIR
    SCENE = ['5922_LR0_K1_BR2']

    # Episodes to visualize in specified SCENE
    viz_ep_ids = ["5922_LR0_K1_BR2__7.75_5.0_180__Television", 
                  "5922_LR0_K1_BR2__7.25_4.5_30__Sofa", 
                  "5922_LR0_K1_BR2__5.5_2.75_330__Fridge",
                  ]
    
    # Episodes to vizualize RGB egocentric agent views for
    viz_video_ids = [["5922_LR0_K1_BR2__7.75_5.0_180__Television"], 
                     ["5922_LR0_K1_BR2__7.25_4.5_30__Sofa"],
                     ["5922_LR0_K1_BR2__5.5_2.75_330__Fridge"],
                     ]

    viz: Optional[VizSuite] = None

    @classmethod
    def tag(cls):
        return "CW-ObjectNav-ProcTHOR-RGB-ClipResNet50GRU-DDPPO"

    def get_viz(self, mode):
        if self.viz is not None:
            return self.viz

        self.viz = VizSuite(
            episode_ids=self.viz_ep_ids,
            mode=mode,
            # Basic 2D trajectory visualizer (task output source):
            # This returns a non orthographic view in order to see the walls. This might cause the trajectory to be slighly skewed in the top down view.
            thor_trajectory=ThorViz(
                figsize=(16, 8),
                viz_rows_cols=(448, 448),
                scenes=self.SCENE,
                houses_dir = os.path.split(self.TEST_EPS_DIR)[0]
            ),

            # Egocentric view visualizer (vector task source):
            egeocentric=AgentViewViz(
                max_video_length=500, episode_ids=self.viz_video_ids
            ),

            # Default action probability visualizer (actor critic output source):
            action_probs=ActorViz(figsize=(3.25, 10), fontsize=18),

            # Default taken action logprob visualizer (rollout storage source):
            taken_action_logprobs=TensorViz1D(),

            # Same episode mask visualizer (rollout storage source):
            episode_mask=TensorViz1D(rollout_source=("masks",)),
        )

        return self.viz

    def machine_params(self, mode="train", **kwargs):
        res = super().machine_params(mode, **kwargs)
        if mode == "test":
            res.set_visualizer(self.get_viz(mode))    
        return res

    def test_task_sampler_args(
        self,
        process_ind: int,
        total_processes: int,
        devices: Optional[List[int]] = None,
        seeds: Optional[List[int]] = None,
        deterministic_cudnn: bool = False,
    ) -> Dict[str, Any]:

        houses_dir = '/'.join(self.TEST_EPS_DIR.split('/')[0:-1])

        scene_name = os.path.join(os.getcwd(),self.TEST_EPS_DIR, 'episodes_' + self.SCENE[0] + '.json')

        res = self._get_sampler_args_for_scene_split(
            self.TEST_SCENES, # Not used in task sampler kwargs
            process_ind,
            total_processes,
            seeds=seeds,
            deterministic_cudnn=deterministic_cudnn,
        )
        res["dataset_first"] = 0

        # Optionally you can only evaluate a subset of episodes:
        # res["dataset_last"]  = 2

        res['scenes'] = scene_name
        res["env_args"] = {}
        res["env_args"].update(self.ENV_ARGS)
        res["env_args"]["houses_dir"] = houses_dir
        res["env_args"]["x_display"] = (
            ("0.%d" % devices[process_ind % len(devices)])
            if devices is not None and len(devices) > 0
            else None
        )
        return res